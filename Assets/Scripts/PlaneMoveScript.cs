using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.EventSystems;

public class PlaneMoveScript : MonoBehaviour, IPointerClickHandler
{
    //Reference to the Rigidbody2D component of the plane
    [SerializeField] private Rigidbody2D _PlaneRB;
    //Reference to the speed of the plane
    [SerializeField] private float _PlaneSpeed;

    //Reference to the floating text game object
    [SerializeField] private GameObject floatingText;
    //Reference to the text mesh component of the floating text
    [SerializeField] private TextMeshPro textmesh;


    private void Awake()
    {
        //Set the rotation of the Floating Text to upright
        floatingText.transform.rotation = Quaternion.identity;
        //Set the name of the plane to the name generated by the PlaneNamer function in the SpawnerScript.
        gameObject.name = SpawnerScript.instance.PlaneNamer();
        //Call the OutputBearing function
        OutputBearing();
        //Call the MovePlane function
        MovePlane();
    }

    //Function to move the plane upright
    void MovePlane()
    {
        //Set the velocity of the plane to the up direction multiplied by the speed
        _PlaneRB.velocity = transform.up * _PlaneSpeed;
    }

    //Function to output the bearing of the plane for Floating Text
    public void OutputBearing()
    {
        //Set the text of the floating text to the name of the plane
        textmesh.text = gameObject.name;
        //Get the rotation of the plane
        int rot = Mathf.RoundToInt(transform.rotation.eulerAngles.z);
        //Calcualtes the real bearing of the plane
        rot = 360 - rot;
        //Appends the text of the floating text with it's rotation.
        textmesh.text += "\n" + rot.ToString() + "°";
    }

    //Function to destroy the plane if collision is detected.
    private void OnCollisionEnter2D(Collision2D collision)
    {
        //Checks if the collision is with the plane.
        if (collision.gameObject.CompareTag("Plane"))
        {
            //Debugiing purposes.
            Debug.Log("Collision Detected" + collision.gameObject.name);
            //Destroys the floating text.
            Destroy(transform.GetChild(0).gameObject);
            //Moves the collision effect to the point of collision.
            GameManager.instance.collisionEffect.transform.position = collision.GetContact(0).point;
            //Sets the game state to GameOver.
            GameManager.instance.UpdateGameState(GameState.GameOver);
        }
    }

    private void OnBecameInvisible()
    {
        //Checks if the game state is Playing and the tag of the object is Plane.
        if ((gameObject.tag == "Plane") && (GameManager.instance.State == GameState.Playing))
        {
            Debug.Log("Plane not visible");
            //Destroys the plane if it goes off screen.
            Destroy(gameObject);
            //Adds 1 to the score counter.
            GameManager.instance.AddScore();
        }
    }

    private void OnBecameVisible()
    {
        //Has come into Camera View and now has a tag of Plane.
        gameObject.tag = "Plane";
        Debug.Log("Plane visible");
    }

    //Function to handle the click event.
    public void OnPointerClick(PointerEventData eventData)
    {
        //Checks if the game state is playing and the previous selection is not the current selection.
        if ((GameManager.instance.State == GameState.Playing) && (GameManager.instance.PreviousSelection != gameObject))
        {
            //Sets the current selection to the previous selection.
            GameManager.instance.PreviousSelection = gameObject;
            Debug.Log("Clicked");
        }
    }
}